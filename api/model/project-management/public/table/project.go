//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Project = newProjectTable("public", "project", "")

type projectTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	UserID      postgres.ColumnString
	Name        postgres.ColumnString
	Description postgres.ColumnString
	Price       postgres.ColumnInteger
	Status      postgres.ColumnString
	StartTime   postgres.ColumnTimestampz
	EndTime     postgres.ColumnTimestampz
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ProjectTable struct {
	projectTable

	EXCLUDED projectTable
}

// AS creates new ProjectTable with assigned alias
func (a ProjectTable) AS(alias string) *ProjectTable {
	return newProjectTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProjectTable with assigned schema name
func (a ProjectTable) FromSchema(schemaName string) *ProjectTable {
	return newProjectTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProjectTable with assigned table prefix
func (a ProjectTable) WithPrefix(prefix string) *ProjectTable {
	return newProjectTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProjectTable with assigned table suffix
func (a ProjectTable) WithSuffix(suffix string) *ProjectTable {
	return newProjectTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProjectTable(schemaName, tableName, alias string) *ProjectTable {
	return &ProjectTable{
		projectTable: newProjectTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newProjectTableImpl("", "excluded", ""),
	}
}

func newProjectTableImpl(schemaName, tableName, alias string) projectTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		UserIDColumn      = postgres.StringColumn("user_id")
		NameColumn        = postgres.StringColumn("name")
		DescriptionColumn = postgres.StringColumn("description")
		PriceColumn       = postgres.IntegerColumn("price")
		StatusColumn      = postgres.StringColumn("status")
		StartTimeColumn   = postgres.TimestampzColumn("start_time")
		EndTimeColumn     = postgres.TimestampzColumn("end_time")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		allColumns        = postgres.ColumnList{IDColumn, UserIDColumn, NameColumn, DescriptionColumn, PriceColumn, StatusColumn, StartTimeColumn, EndTimeColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns    = postgres.ColumnList{UserIDColumn, NameColumn, DescriptionColumn, PriceColumn, StatusColumn, StartTimeColumn, EndTimeColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return projectTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		UserID:      UserIDColumn,
		Name:        NameColumn,
		Description: DescriptionColumn,
		Price:       PriceColumn,
		Status:      StatusColumn,
		StartTime:   StartTimeColumn,
		EndTime:     EndTimeColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
